/*В первом у нас синтаксис "литерал объекта".
Синтаксис литералов объекта позволяет создавать объекты с помощью фигурных скобок {...}.
Свойство у a будет с именем hello и значением student у этого свойства.
*/
const a = {hello: 'student'};
//Функция getA(b) принимает в качестве аргумента b.
function getA(b) {
    /*
     b - это локальная переменная функции getA.
     Фактически это ссылка на объект a в вашем случае.
      Поэтому когда вы меняете свойства объекта b, то меняются свойства объекта a.
       Но когда вы меняете саму локальную переменную b,
        то она просто теряет связь с объектом a и начинает указывать уже на что-то другое,
         но на объект a это никак не влияет.
 */
    b = null;
}
//Вызываем функцию getA(b) и передаем в качестве аргумента объект a.
getA(a);
/*Выводим в консоль объект a. Свойство hello и значением student.
 Потому что мы не изменили сам объект a. */
console.log(a);
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//Во втором у нас синтаксис "литерал объекта".
const a = {};//Обычно используют вариант с фигурными скобками {...}. Такое объявление называют литералом объекта или литеральной нотацией.
//Функция getA(b) принимает в качестве аргумента b.
function getA(b) {
    /*В функции getA(b) указано свойство c именем bye и значение этого свойства = 'teacher'.
     Вот наглядный пример когда добавляют в объект с именем указанным в функции getA(b) в параметрах в нашем случае будет объект a
     новое свойство и значение.
      Для обращения к свойствам используется запись «через точку»*/
    b.bye = 'teacher';
}
//Вызываем функцию getA(b) и передаем в качестве аргумента объект a.
getA(a);
/*Выводим в консоль объект a. Cо свойством bye и значением teacher.
//Может показаться, что строка b.bye = 'teacher' должна вызвать ошибку, но нет, здесь всё в порядке.
 Дело в том, что объявление const защищает от изменений только саму a, а не её содержимое.
*/
console.log(a);
//Вот таким образом мы добавили в объект a новое свойство и значение.